plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.mod_group_id
archivesBaseName = project.archivesBaseName

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: project.mapping_channel, version: project.mapping_version
    copyIdeResources = true
    generateRunFolders = true

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=tabby.mixins.json"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            taskName 'tabby-forge-1.20_client'
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
            taskName 'tabby-forge-1.20_server'
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "AzureDoom",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "AzureDoom",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

mixin {
    add sourceSets.main, "tabby.refmap.json"
    config "tabby.mixins.json"
}

if (file('key.properties').exists()) {
    curseforge {
        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())

        project {
            apiKey = curseProp.getProperty('curseKey')
            id = "903935"
            releaseType = "release"
            changelogType = 'text'
            changelog = file('changelog.txt')
        	addGameVersion("1.20.1")
            addGameVersion("Forge")
            addGameVersion("NeoForge")
            addGameVersion("Java 17")
        }
    }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = 'rQAFxEc8' 
		versionNumber = project.mod_version 
		uploadFile = jar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = ['1.20.1']
		loaders = ['forge', 'neoforge']
	}
}